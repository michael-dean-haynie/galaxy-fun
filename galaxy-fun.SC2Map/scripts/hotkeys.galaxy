//////////////////////////////////////////////////////////////////
// STRUCTS
//////////////////////////////////////////////////////////////////

struct HotkeyPrompt
{
    string instruction; // "Build Structure"
    text targetTxt; // "Factory"
    string icon; // "Assets\\Textures\\btn-building-terran-factory.dds"
    string targetUnitId;
};

//////////////////////////////////////////////////////////////////
// CONSTANTS
//////////////////////////////////////////////////////////////////

// Worker Unit Ids
static string[3] WORKER_UNIT_IDS;

// Build Ability Ids
static string[3] BUILD_ABILITY_IDS;

// Gas Structure Ids
static string[3] GAS_STRUCTURE_IDS;
static string GAS_UNIT_ID = "VespeneGeyser";
static string PYLON_UNIT_ID = "Pylon";

static string[3] BUILD_HOTKEY_PROMPT_INSTRUCTIONS;

// Hotkey Prompts
static HotkeyPrompt[3][30] BUILD_HOTKEY_PROMPTS;

// gv_somepoint = PointFromName("hotkeytraining_structure_location");

//////////////////////////////////////////////////////////////////
// VARIABLES
//////////////////////////////////////////////////////////////////

static int activeHotkeyPromptRaceIdx;
static int activeHotkeyPromptCmdIdx;
static int activeHotkeyPromptDialog;

static unit activeHotkeyPromptUnit;
static unit gasPropUnit;
static unit pylonPropUnit;

//////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////

void PromptUserForBuildStructureHotkey(int raceIdx) {
    string workerUnitId = WORKER_UNIT_IDS[raceIdx];
    string buildAbilityId = BUILD_ABILITY_IDS[raceIdx];

    int cmdIdx = RandomInt(0, 29);
    
    // random abilcmd
    while(BUILD_HOTKEY_PROMPTS[raceIdx][cmdIdx].instruction == null) {
        cmdIdx = RandomInt(0, 29);
    }
    activeHotkeyPromptRaceIdx = raceIdx;
    activeHotkeyPromptCmdIdx = cmdIdx;

    // dialog
    if (activeHotkeyPromptDialog != 0) {
        DialogDestroy(activeHotkeyPromptDialog);
    }
    activeHotkeyPromptDialog = CreateHotkeyPromptDialog(
        BUILD_HOTKEY_PROMPTS[raceIdx][cmdIdx].instruction,
        BUILD_HOTKEY_PROMPTS[raceIdx][cmdIdx].targetTxt,
        BUILD_HOTKEY_PROMPTS[raceIdx][cmdIdx].icon
    );

    // worker
    if (activeHotkeyPromptUnit != null && UnitGetType(activeHotkeyPromptUnit) != WORKER_UNIT_IDS[raceIdx]) {
        UnitRemove(activeHotkeyPromptUnit);
        activeHotkeyPromptUnit = null;
    }
    if (activeHotkeyPromptUnit == null) {
        libNtve_gf_CreateUnitsAtPoint2(1, WORKER_UNIT_IDS[raceIdx], c_unitCreateIgnorePlacement, 1, PointFromName("hotkeytraining_active_unit_location"));
        activeHotkeyPromptUnit = UnitLastCreated();
    }
    UnitSelect(activeHotkeyPromptUnit, 1, true);
    UnitIssueOrder(activeHotkeyPromptUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);

    // gas (if needed)
    if (gasPropUnit != null && BUILD_HOTKEY_PROMPTS[raceIdx][cmdIdx].targetUnitId != GAS_STRUCTURE_IDS[raceIdx]) {
        UnitRemove(gasPropUnit);
        gasPropUnit = null;
    }
    if (gasPropUnit == null && BUILD_HOTKEY_PROMPTS[raceIdx][cmdIdx].targetUnitId == GAS_STRUCTURE_IDS[raceIdx]) {
        libNtve_gf_CreateUnitsAtPoint2(1, GAS_UNIT_ID, c_unitCreateIgnorePlacement, 1, PointFromName("hotkeytraining_structure_location"));
        gasPropUnit = UnitLastCreated();
    }

    // pylon (if needed)
    if (pylonPropUnit != null && raceIdx != PROTOSS_RACE) {
        UnitRemove(pylonPropUnit);
        pylonPropUnit = null;
    }
    if (pylonPropUnit == null && raceIdx == PROTOSS_RACE) {
        libNtve_gf_CreateUnitsAtPoint2(1, PYLON_UNIT_ID, c_unitCreateIgnorePlacement, 1, PointFromName("hotkeytraining_pylon_location"));
        pylonPropUnit = UnitLastCreated();
    }

    // creep (if needed)
    if (raceIdx == ZERG_RACE) {
        CreepModify(PointFromName("hotkeytraining_structure_location"), 4.0, true, true);
    }
    if (raceIdx != ZERG_RACE) {
        CreepModify(PointFromName("hotkeytraining_structure_location"), 4.0, false, true);
    }

    // Remove Techtree Requirements / set resources / supply
    TechTreeRequirementsEnable(1, false);
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, 999999);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperSetTo, 999999);
    // PlayerModifyPropertyFixed(1, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200.0); // not working?
}

static void InitBuildHotkeyPrompts() {
    int raceIdx;
    int cardLayoutsCount; // the number of card layouts on the worker unit
    int cardLayoutsIdx;
    int layoutButtonsCount; // the number of layout buttons in a card layout
    int layoutButtonsIdx;

    string abilCmdStr;
    abilcmd abilCmd;
    string unitId;
    string unitNameStr;
    text unitNameTxt;
    string buttonId;
    string iconStr;
    HotkeyPrompt hotkeyPrompt;

    string fieldPath;

    for(raceIdx = 0; raceIdx < 3; raceIdx += 1) {
        cardLayoutsCount = CatalogFieldValueCount(c_gameCatalogUnit, WORKER_UNIT_IDS[raceIdx], "CardLayouts", 1);
        for(cardLayoutsIdx = 0; cardLayoutsIdx < cardLayoutsCount; cardLayoutsIdx += 1) {
            fieldPath = "CardLayouts" + "[" + IntToString(cardLayoutsIdx) + "].LayoutButtons";
            layoutButtonsCount = CatalogFieldValueCount(c_gameCatalogUnit, WORKER_UNIT_IDS[raceIdx], fieldPath, 1);
            for(layoutButtonsIdx = 0; layoutButtonsIdx < layoutButtonsCount; layoutButtonsIdx += 1) {
                fieldPath = "CardLayouts" + "[" + IntToString(cardLayoutsIdx) + "].LayoutButtons[" + IntToString(layoutButtonsIdx) + "].AbilCmd";
                abilCmdStr = CatalogFieldValueGet(c_gameCatalogUnit, WORKER_UNIT_IDS[raceIdx], fieldPath, 1);
                abilCmd = StringToAbilCmd(abilCmdStr);

                // Ignore the "Halt" command - however that works...
                if (AbilityCommandGetAbility(abilCmd) == BUILD_ABILITY_IDS[raceIdx] && !StringContains(abilCmdStr, ",Halt", 2, true)) {

                    unitId = CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(abilCmd), "InfoArray[" + IntToString(AbilityCommandGetCommand(abilCmd)) + "].Unit", 1);
                    unitNameStr = CatalogFieldValueGet(c_gameCatalogUnit, unitId, "Name", 1);
                    unitNameTxt = StringExternal(unitNameStr);
                    // printMsg(unitNameTxt, 1, c_messageTypeDebug);

                    buttonId = CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(abilCmd), "InfoArray[" + IntToString(AbilityCommandGetCommand(abilCmd)) + "].Button.DefaultButtonFace", 1);
                    iconStr = CatalogFieldValueGet(c_gameCatalogButton, buttonId, "Icon", 1);

                    BUILD_HOTKEY_PROMPTS[raceIdx][AbilityCommandGetCommand(abilCmd)].instruction = BUILD_HOTKEY_PROMPT_INSTRUCTIONS[raceIdx];
                    BUILD_HOTKEY_PROMPTS[raceIdx][AbilityCommandGetCommand(abilCmd)].targetTxt = unitNameTxt;
                    BUILD_HOTKEY_PROMPTS[raceIdx][AbilityCommandGetCommand(abilCmd)].icon = iconStr;
                    BUILD_HOTKEY_PROMPTS[raceIdx][AbilityCommandGetCommand(abilCmd)].targetUnitId = unitId;

                }
            }
        }
    }
}

//////////////////////////////////////////////////////////////////
// Trigger Handlers
//////////////////////////////////////////////////////////////////

void hotkeys_onUnitIsCreated(unit triggeringUnit, string triggeringAbil) {
    string unitType = UnitGetType(triggeringUnit);

    if (triggeringAbil != BUILD_ABILITY_IDS[activeHotkeyPromptRaceIdx]) {
        return; // unit was probably created by trigger or some other way
    }

    if (unitType == BUILD_HOTKEY_PROMPTS[activeHotkeyPromptRaceIdx][activeHotkeyPromptCmdIdx].targetUnitId) {
        dbg("yay");
        PromptUserForBuildStructureHotkey(activeHotkeyPromptRaceIdx);
    }
    else {
        dbg("nay");
    }

    // Stop building the structure immediately
    UnitIssueOrder(triggeringUnit, Order(AbilityCommand("BuildInProgress", 0)), c_orderQueueReplace);
}

void hotkeys_init() {
    // Worker Unit Ids
    WORKER_UNIT_IDS[0] = "SCV";
    WORKER_UNIT_IDS[1] = "Drone";
    WORKER_UNIT_IDS[2] = "Probe";

    // Build Ability Ids
    BUILD_ABILITY_IDS[0] = "TerranBuild";
    BUILD_ABILITY_IDS[1] = "ZergBuild";
    BUILD_ABILITY_IDS[2] = "ProtossBuild";

    // Gas Structure Ids
    GAS_STRUCTURE_IDS[0] = "Refinery";
    GAS_STRUCTURE_IDS[1] = "Extractor";
    GAS_STRUCTURE_IDS[2] = "Assimilator";

    // Build Hotkey Prompt Instructions
    BUILD_HOTKEY_PROMPT_INSTRUCTIONS[0] = "Build Structure";
    BUILD_HOTKEY_PROMPT_INSTRUCTIONS[1] = "Mutate Into Structure";
    BUILD_HOTKEY_PROMPT_INSTRUCTIONS[2] = "Warp In Structure";

    // Tweak range of build abilities
    CatalogFieldValueSet(c_gameCatalogAbil, BUILD_ABILITY_IDS[TERRAN_RACE], "Range", 1, "1000");
    CatalogFieldValueSet(c_gameCatalogAbil, BUILD_ABILITY_IDS[ZERG_RACE], "Range", 1, "1000");
    CatalogFieldValueSet(c_gameCatalogAbil, BUILD_ABILITY_IDS[PROTOSS_RACE], "Range", 1, "1000");

    // Hotkey Prompts
    InitBuildHotkeyPrompts();


}

void DoExploring() {

    //  <CUnit id="Extractor">
    //      <BuiltOn index="0" removed="1"/>checkout <CUnit><BuiltOn/></CUnit>

    //  <CUnit id="FleetBeacon">
    //      <BehaviorArray index="0" removed="1"/>

    string scope;
    bool isArray;
    string fieldType;
    int fieldTypeCategory;
    int fieldValueCount;
    int fieldValueIdx;
    string fieldValue;


    scope = CatalogEntryScope(c_gameCatalogUnit, "Refinery");
    dbg(scope);

    isArray = CatalogFieldIsArray(scope, "BuiltOn");
    dbg(libNtve_gf_ConvertBooleanToString(isArray));

    fieldType = CatalogFieldType(scope, "BuiltOn");
    dbg(fieldType);

    fieldTypeCategory = CatalogFieldTypeCategory(scope, "BuiltOn");
    dbg(IntToString(fieldTypeCategory));

    fieldValueCount = CatalogFieldValueCount(c_gameCatalogUnit, "Refinery", "BuiltOn", 1);
    dbg(IntToString(fieldValueCount));

    for(fieldValueIdx = 0; fieldValueIdx < fieldValueCount; fieldValueIdx += 1) {
        fieldValue = CatalogFieldValueGet(c_gameCatalogUnit, "Refinery", "BuiltOn[" + IntToString(fieldValueIdx) + "]", 1);
        dbg(IntToString(fieldValueIdx));
        dbg(fieldValue);

        CatalogFieldValueSet(c_gameCatalogUnit, "Refinery", "BuiltOn[" + IntToString(fieldValueIdx) + "]", 1, "");
    }



}

void Development() {



    // DoExploring();
}