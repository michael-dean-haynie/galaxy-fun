//////////////////////////////////////////////////////////////////
// STRUCTS
//////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////
// CONSTANTS
//////////////////////////////////////////////////////////////////

static const string BANK_NAME = "cadenzasTrainingGround";

//////////////////////////////////////////////////////////////////
// VARIABLES
//////////////////////////////////////////////////////////////////

static bank ctgBank;

//////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////

// static function declarations
void initHotkeysStructuresSections();
void progressHotkeysStructuresSections();

string bk__raceId(int raceInt) {
    if (raceInt == 0) {
        return "terran";
    }
    if (raceInt == 1) {
        return "zerg";
    }
    if (raceInt == 2) {
        return "protoss";
    }
    return null;
}

int bk__raceInt(string raceId) {
    if (raceId == "terran") {
        return 0;
    }
    if (raceId == "zerg") {
        return 1;
    }
    if (raceId == "protoss") {
        return 2;
    }
    return -1;
}

void bk__startHotkeysStructuresSession(int raceInt) {
    int cmdIdx;
    string sectionName;
    string structureId;

    ctgBank = BankLoad("cadenzastrainingground", 1);

    hk_st__init(); // make sure constants have been initialized

    for(cmdIdx = 0; cmdIdx < hk_st__buildHotkeyPromptCmdCount; cmdIdx += 1) {
        if (hk_st__buildHotkeyPromptHasValue(raceInt, cmdIdx)) {
            structureId = hk_st__buildHotkeyPrompts[raceInt][cmdIdx].producedUnitId;
            sectionName = bk__hotkeysStructuresPrefix  + structureId;

            // move "current" data from last session to "most recent session", and start fresh for this session
            if (BankValueGetAsInt(ctgBank, sectionName, bk__currentSessionAttempts) > 0) {
                BankValueSetFromInt(ctgBank, sectionName, bk__mostRecentSessionAttempts, BankValueGetAsInt(ctgBank, sectionName, bk__currentSessionAttempts));
                BankValueSetFromInt(ctgBank, sectionName, bk__mostRecentSessionFailures, BankValueGetAsInt(ctgBank, sectionName, bk__currentSessionFailures));
                BankValueSetFromFixed(ctgBank, sectionName, bk__mostRecentSessionDelay, BankValueGetAsFixed(ctgBank, sectionName, bk__currentSessionDelay));
                BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionAttempts, 0);
                BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionFailures, 0);
                BankValueSetFromFixed(ctgBank, sectionName, bk__currentSessionDelay, 0.0);
                BankSave(ctgBank);
            }

            BankSave(ctgBank);
        }
    }

    BankSave(ctgBank);
}

void bk__startHotkeysProductionSession(int raceInt) {
    int cmdIdx;
    int casterIdx;

    string unitId;
    string sectionName;

    ctgBank = BankLoad("cadenzastrainingground", 1);

    hk_pd__init(); // make sure constants have been initialized
    for(casterIdx = 0; casterIdx < hk_pd__castersSize; casterIdx += 1) {
        if(hk_pd__castersElementHasValue(raceInt, casterIdx)) {
            for(cmdIdx = 0; cmdIdx < hk_pd__promptsSize; cmdIdx += 1) {
                if (hk_pd__promptsElementHasValue(raceInt, casterIdx, cmdIdx)) {
                    unitId = hk_pd__prompts[raceInt][casterIdx][cmdIdx].producedUnitId;
                    sectionName = bk__hotkeysProductionPrefix + unitId;

                    // move "current" data from last session to "most recent session", and start fresh for this session
                    if (BankValueGetAsInt(ctgBank, sectionName, bk__currentSessionAttempts) > 0) {
                        BankValueSetFromInt(ctgBank, sectionName, bk__mostRecentSessionAttempts, BankValueGetAsInt(ctgBank, sectionName, bk__currentSessionAttempts));
                        BankValueSetFromInt(ctgBank, sectionName, bk__mostRecentSessionFailures, BankValueGetAsInt(ctgBank, sectionName, bk__currentSessionFailures));
                        BankValueSetFromFixed(ctgBank, sectionName, bk__mostRecentSessionDelay, BankValueGetAsFixed(ctgBank, sectionName, bk__currentSessionDelay));
                        BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionAttempts, 0);
                        BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionFailures, 0);
                        BankValueSetFromFixed(ctgBank, sectionName, bk__currentSessionDelay, 0.0);
                        BankSave(ctgBank);
                    }
                }
            }
        }
    }

    BankSave(ctgBank);
}

void bk__saveHotkeysStructuresAttempt(int raceInt, string structureId, bool attemptWasSuccessful, fixed delay) {
    string sectionName = bk__hotkeysStructuresPrefix + structureId;
    int existingAllTimeAttempts;
    int existingAllTimeFailures;
    fixed existingAllTimeDelay;
    int existingAllTimeSuccesses;
    int existingCurrentSessionAttempts;
    int existingCurrentSessionFailures;
    fixed existingCurrentSessionDelay;
    int existingCurrentSessionSuccesses;

    fixed newAllTimeDelay;
    fixed newCurrentSessionDelay;

    existingAllTimeAttempts = BankValueGetAsInt(ctgBank, sectionName, bk__allTimeAttempts);
    existingAllTimeFailures = BankValueGetAsInt(ctgBank, sectionName, bk__allTimeFailures);
    existingAllTimeDelay = BankValueGetAsFixed(ctgBank, sectionName, bk__allTimeDelay);
    existingAllTimeSuccesses = existingAllTimeAttempts - existingAllTimeFailures;

    existingCurrentSessionAttempts = BankValueGetAsInt(ctgBank, sectionName, bk__currentSessionAttempts);
    existingCurrentSessionFailures = BankValueGetAsInt(ctgBank, sectionName, bk__currentSessionFailures);
    existingCurrentSessionDelay = BankValueGetAsFixed(ctgBank, sectionName, bk__currentSessionDelay);
    existingCurrentSessionSuccesses = existingCurrentSessionAttempts - existingCurrentSessionFailures;

    // update attempts
    BankValueSetFromInt(ctgBank, sectionName, bk__allTimeAttempts, existingAllTimeAttempts + 1);
    BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionAttempts, existingCurrentSessionAttempts + 1);

    if (attemptWasSuccessful) {
        // update delays
        newAllTimeDelay = ((existingAllTimeSuccesses * existingAllTimeDelay) + delay) / (existingAllTimeAttempts + 1);
        BankValueSetFromFixed(ctgBank, sectionName, bk__allTimeDelay, newAllTimeDelay);

        newCurrentSessionDelay = ((existingCurrentSessionSuccesses * existingCurrentSessionDelay) + delay) / (existingCurrentSessionAttempts + 1);
        BankValueSetFromFixed(ctgBank, sectionName, bk__currentSessionDelay, newCurrentSessionDelay);
    }
    else {
        // update failures
        BankValueSetFromInt(ctgBank, sectionName, bk__allTimeFailures, existingAllTimeFailures + 1);
        BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionFailures, existingCurrentSessionFailures + 1);
    }

    BankSave(ctgBank);
}

void bk__saveHotkeysProductionAttempt(int raceInt, string unitId, bool attemptWasSuccessful, fixed delay) {
    string sectionName = bk__hotkeysProductionPrefix + unitId;
    int existingAllTimeAttempts;
    int existingAllTimeFailures;
    fixed existingAllTimeDelay;
    int existingAllTimeSuccesses;
    int existingCurrentSessionAttempts;
    int existingCurrentSessionFailures;
    fixed existingCurrentSessionDelay;
    int existingCurrentSessionSuccesses;

    fixed newAllTimeDelay;
    fixed newCurrentSessionDelay;

    existingAllTimeAttempts = BankValueGetAsInt(ctgBank, sectionName, bk__allTimeAttempts);
    existingAllTimeFailures = BankValueGetAsInt(ctgBank, sectionName, bk__allTimeFailures);
    existingAllTimeDelay = BankValueGetAsFixed(ctgBank, sectionName, bk__allTimeDelay);
    existingAllTimeSuccesses = existingAllTimeAttempts - existingAllTimeFailures;

    existingCurrentSessionAttempts = BankValueGetAsInt(ctgBank, sectionName, bk__currentSessionAttempts);
    existingCurrentSessionFailures = BankValueGetAsInt(ctgBank, sectionName, bk__currentSessionFailures);
    existingCurrentSessionDelay = BankValueGetAsFixed(ctgBank, sectionName, bk__currentSessionDelay);
    existingCurrentSessionSuccesses = existingCurrentSessionAttempts - existingCurrentSessionFailures;

    // update attempts
    BankValueSetFromInt(ctgBank, sectionName, bk__allTimeAttempts, existingAllTimeAttempts + 1);
    BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionAttempts, existingCurrentSessionAttempts + 1);

    if (attemptWasSuccessful) {
        // update delays
        newAllTimeDelay = ((existingAllTimeSuccesses * existingAllTimeDelay) + delay) / (existingAllTimeAttempts + 1);
        BankValueSetFromFixed(ctgBank, sectionName, bk__allTimeDelay, newAllTimeDelay);

        newCurrentSessionDelay = ((existingCurrentSessionSuccesses * existingCurrentSessionDelay) + delay) / (existingCurrentSessionAttempts + 1);
        BankValueSetFromFixed(ctgBank, sectionName, bk__currentSessionDelay, newCurrentSessionDelay);
    }
    else {
        // update failures
        BankValueSetFromInt(ctgBank, sectionName, bk__allTimeFailures, existingAllTimeFailures + 1);
        BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionFailures, existingCurrentSessionFailures + 1);
    }

    BankSave(ctgBank);
}

int bk__getValueAsInt(string section, string key) {
    return BankValueGetAsInt(ctgBank, section, key);
}

fixed bk__getValueAsFixed(string section, string key) {
    return BankValueGetAsFixed(ctgBank, section, key);
}

//////////////////////////////////////////////////////////////////
// Initialization
//////////////////////////////////////////////////////////////////

void bk__init() {
    int raceIdx;
    int casterIdx;
    int cmdIdx;

    string structureId;
    string unitId;
    string sectionName;

    int i;

    // dbg("bank exists before load: " + libNtve_gf_ConvertBooleanToString(BankExists("cadenzastrainingground", 1)));
    ctgBank = BankLoad("cadenzastrainingground", 1);
    // dbg("bank exists after load: " + libNtve_gf_ConvertBooleanToString(BankExists("cadenzastrainingground", 1)));
    BankWait(ctgBank);
    // dbg("bank exists after BankWait(): " + libNtve_gf_ConvertBooleanToString(BankExists("cadenzastrainingground", 1)));
    // Wait(1.0, c_timeReal);
    // dbg("bank exists after Wait(): " + libNtve_gf_ConvertBooleanToString(BankExists("cadenzastrainingground", 1)));
    // BankReload(ctgBank);
    // dbg("bank exists after BankReload(): " + libNtve_gf_ConvertBooleanToString(BankExists("cadenzastrainingground", 1)));
    // BankWait(ctgBank);
    // dbg("bank exists after BankWait(): " + libNtve_gf_ConvertBooleanToString(BankExists("cadenzastrainingground", 1)));
    // Wait(1.0, c_timeReal);
    // dbg("bank exists after Wait(): " + libNtve_gf_ConvertBooleanToString(BankExists("cadenzastrainingground", 1)));

    
    dbg("BankSectionCount(): " + IntToString(BankSectionCount(ctgBank)));

    for(i = 0; i < BankSectionCount(ctgBank); i += 1) {
        dbg("BankSectionName(" + IntToString(i) + "): " + BankSectionName(ctgBank, i));
    }

    hk_st__init(); // make sure constants have been initialized
    for(raceIdx = 0; raceIdx < RACE_COUNT; raceIdx += 1) {
        for(cmdIdx = 0; cmdIdx < hk_st__buildHotkeyPromptCmdCount; cmdIdx += 1) {
            if (hk_st__buildHotkeyPromptHasValue(raceIdx, cmdIdx)) {
                structureId = hk_st__buildHotkeyPrompts[raceIdx][cmdIdx].producedUnitId;
                sectionName = bk__hotkeysStructuresPrefix + structureId;



                // initialize if needed
                if (!BankKeyExists(ctgBank , sectionName, bk__allTimeAttempts)) {
                    BankValueSetFromInt(ctgBank, sectionName, bk__allTimeAttempts, 0);
                    BankValueSetFromInt(ctgBank, sectionName, bk__allTimeFailures, 0);
                    BankValueSetFromFixed(ctgBank, sectionName, bk__allTimeDelay, 0.0);
                    BankValueSetFromInt(ctgBank, sectionName, bk__mostRecentSessionAttempts, 0);
                    BankValueSetFromInt(ctgBank, sectionName, bk__mostRecentSessionFailures, 0);
                    BankValueSetFromFixed(ctgBank, sectionName, bk__mostRecentSessionDelay, 0.0);
                    BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionAttempts, 0);
                    BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionFailures, 0);
                    BankValueSetFromFixed(ctgBank, sectionName, bk__currentSessionDelay, 0.0);
                    BankSave(ctgBank);
                }
            }
        }
    }

    hk_pd__init(); // make sure constants have been initialized
    for(raceIdx = 0; raceIdx < RACE_COUNT; raceIdx += 1) {
        for(casterIdx = 0; casterIdx < hk_pd__castersSize; casterIdx += 1) {
            if(hk_pd__castersElementHasValue(raceIdx, casterIdx)) {
                for(cmdIdx = 0; cmdIdx < hk_pd__promptsSize; cmdIdx += 1) {
                    if (hk_pd__promptsElementHasValue(raceIdx, casterIdx, cmdIdx)) {
                        unitId = hk_pd__prompts[raceIdx][casterIdx][cmdIdx].producedUnitId;
                        sectionName = bk__hotkeysProductionPrefix + unitId;

                        // initialize if needed
                        if (!BankKeyExists(ctgBank , sectionName, bk__allTimeAttempts)) {
                            BankValueSetFromInt(ctgBank, sectionName, bk__allTimeAttempts, 0);
                            BankValueSetFromInt(ctgBank, sectionName, bk__allTimeFailures, 0);
                            BankValueSetFromFixed(ctgBank, sectionName, bk__allTimeDelay, 0.0);
                            BankValueSetFromInt(ctgBank, sectionName, bk__mostRecentSessionAttempts, 0);
                            BankValueSetFromInt(ctgBank, sectionName, bk__mostRecentSessionFailures, 0);
                            BankValueSetFromFixed(ctgBank, sectionName, bk__mostRecentSessionDelay, 0.0);
                            BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionAttempts, 0);
                            BankValueSetFromInt(ctgBank, sectionName, bk__currentSessionFailures, 0);
                            BankValueSetFromFixed(ctgBank, sectionName, bk__currentSessionDelay, 0.0);
                            BankSave(ctgBank);
                        }
                    }
                }
            }
        }
    }



    BankSave(ctgBank);

}