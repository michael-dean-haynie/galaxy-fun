//////////////////////////////////////////////////////////////////
// CONSTANTS
//////////////////////////////////////////////////////////////////

static string[3] WORKER_UNIT_IDS;
static string[3] BUILD_ABILITY_IDS;

static string[3] GAS_STRUCTURE_IDS;
static string GAS_UNIT_ID = "VespeneGeyser";
static string PYLON_UNIT_ID = "Pylon";

static string[3] BUILD_HOTKEY_PROMPT_INSTRUCTIONS;

//////////////////////////////////////////////////////////////////
// VARIABLES
//////////////////////////////////////////////////////////////////

static bool initialized = false;

static int activeHotkeyPromptRaceIdx;
static int activeHotkeyPromptCmdIdx;
static int activeHotkeyPromptDialog;
static timer activeHotkeyPromptTimer;

static unit activeHotkeyPromptUnit;
static unit gasPropUnit;
static unit pylonPropUnit;

//////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////

// static funciton declarations
static void initBuildHotkeyPrompts ();
static void promptUserForBuildStructureHotkey(int raceIdx);


void hk_st__begin(int raceIdx) {
    // start fresh with bank data
    bk__startHotkeysStructuresSession(raceIdx);

    // tweak range of build abilities
    CatalogFieldValueSet(c_gameCatalogAbil, BUILD_ABILITY_IDS[TERRAN], "Range", 1, "1000");
    CatalogFieldValueSet(c_gameCatalogAbil, BUILD_ABILITY_IDS[ZERG], "Range", 1, "1000");
    CatalogFieldValueSet(c_gameCatalogAbil, BUILD_ABILITY_IDS[PROTOSS], "Range", 1, "1000");

    // Remove Techtree Requirements / set resources / supply
    TechTreeRequirementsEnable(1, false);
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, 999999);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperSetTo, 999999);
    // PlayerModifyPropertyFixed(1, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200.0); // not working?

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);

    libNtve_gf_HideScreenButton(true, sb__stopBtn);

    promptUserForBuildStructureHotkey(raceIdx);
}

void hk_st__stop() {
    DialogDestroy(activeHotkeyPromptDialog);

    // reset range of build abilities
    CatalogFieldValueSet(c_gameCatalogAbil, BUILD_ABILITY_IDS[TERRAN], "Range", 1, "0");
    CatalogFieldValueSet(c_gameCatalogAbil, BUILD_ABILITY_IDS[ZERG], "Range", 1, "0");
    CatalogFieldValueSet(c_gameCatalogAbil, BUILD_ABILITY_IDS[PROTOSS], "Range", 1, "0");

    // re-enable techtree requirements
    TechTreeRequirementsEnable(1, true);
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperSetTo, 0);
    // PlayerModifyPropertyFixed(1, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 0.0); // not working?

    // show resources again
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);

    // remove worker
    if (activeHotkeyPromptUnit != null) {
        UnitRemove(activeHotkeyPromptUnit);
        activeHotkeyPromptUnit = null;
    }

    // remove gas (if needed)
    if (gasPropUnit != null) {
        UnitRemove(gasPropUnit);
        gasPropUnit = null;
    }

    // remove pylon (if needed)
    if (pylonPropUnit != null) {
        UnitRemove(pylonPropUnit);
        pylonPropUnit = null;
    }

    // remove creep
    CreepModify(PointFromName("hotkeytraining_structure_location"), 4.0, false, true);

    dg_hk__createSelectTrainingModeDialog();
}

void promptUserForBuildStructureHotkey(int raceIdx) {
    string workerUnitId = WORKER_UNIT_IDS[raceIdx];
    string buildAbilityId = BUILD_ABILITY_IDS[raceIdx];

    int cmdIdx = RandomInt(0, 29);
    
    // random abilcmd
    while(hk_st__buildHotkeyPrompts[raceIdx][cmdIdx].instruction == null) {
        cmdIdx = RandomInt(0, 29);
    }
    activeHotkeyPromptRaceIdx = raceIdx;
    activeHotkeyPromptCmdIdx = cmdIdx;

    // dialog
    if (activeHotkeyPromptDialog != 0) {
        DialogDestroy(activeHotkeyPromptDialog);
    }
    activeHotkeyPromptDialog = dg_hk__createHotkeyPromptDialog(
        hk_st__buildHotkeyPrompts[raceIdx][cmdIdx].instruction,
        hk_st__buildHotkeyPrompts[raceIdx][cmdIdx].targetTxt,
        hk_st__buildHotkeyPrompts[raceIdx][cmdIdx].icon
    );

    // track response time
    if (activeHotkeyPromptTimer == null) {
        activeHotkeyPromptTimer = TimerCreate();
        TimerStart(activeHotkeyPromptTimer, 9999.0, false, 1);
    }
    TimerRestart(activeHotkeyPromptTimer);

    // worker
    if (activeHotkeyPromptUnit != null && UnitGetType(activeHotkeyPromptUnit) != WORKER_UNIT_IDS[raceIdx]) {
        UnitRemove(activeHotkeyPromptUnit);
        activeHotkeyPromptUnit = null;
    }
    if (activeHotkeyPromptUnit == null) {
        libNtve_gf_CreateUnitsAtPoint2(1, WORKER_UNIT_IDS[raceIdx], c_unitCreateIgnorePlacement, 1, PointFromName("hotkeytraining_active_unit_location"));
        activeHotkeyPromptUnit = UnitLastCreated();
    }
    UnitSelect(activeHotkeyPromptUnit, 1, true);
    UnitIssueOrder(activeHotkeyPromptUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);

    // gas (if needed)
    if (gasPropUnit != null && hk_st__buildHotkeyPrompts[raceIdx][cmdIdx].targetUnitId != GAS_STRUCTURE_IDS[raceIdx]) {
        UnitRemove(gasPropUnit);
        gasPropUnit = null;
    }
    if (gasPropUnit == null && hk_st__buildHotkeyPrompts[raceIdx][cmdIdx].targetUnitId == GAS_STRUCTURE_IDS[raceIdx]) {
        libNtve_gf_CreateUnitsAtPoint2(1, GAS_UNIT_ID, c_unitCreateIgnorePlacement, 1,PointWithOffset(PointFromName("hotkeytraining_structure_location"), -1, 0) );
        gasPropUnit = UnitLastCreated();
    }

    // pylon (if needed)
    if (pylonPropUnit != null && raceIdx != PROTOSS) {
        UnitRemove(pylonPropUnit);
        pylonPropUnit = null;
    }
    if (pylonPropUnit == null && raceIdx == PROTOSS) {
        libNtve_gf_CreateUnitsAtPoint2(1, PYLON_UNIT_ID, c_unitCreateIgnorePlacement, 1, PointFromName("hotkeytraining_pylon_location"));
        pylonPropUnit = UnitLastCreated();
    }

    // creep (if needed)
    if (raceIdx == ZERG) {
        CreepModify(PointFromName("hotkeytraining_structure_location"), 4.0, true, true);
    }
    if (raceIdx != ZERG) {
        CreepModify(PointFromName("hotkeytraining_structure_location"), 4.0, false, true);
    }

}

void hk_st__onUnitIsCreated(unit triggeringUnit, string triggeringAbil) {
    string unitType = UnitGetType(triggeringUnit);
    string structureId = hk_st__buildHotkeyPrompts[activeHotkeyPromptRaceIdx][activeHotkeyPromptCmdIdx].targetUnitId;

    if (triggeringAbil != BUILD_ABILITY_IDS[activeHotkeyPromptRaceIdx]) {
        return; // unit was probably created by trigger or some other way
    }

    // success
    if (unitType == hk_st__buildHotkeyPrompts[activeHotkeyPromptRaceIdx][activeHotkeyPromptCmdIdx].targetUnitId) {
        bk__saveHotkeysStructuresAttempt(activeHotkeyPromptRaceIdx, structureId, true, TimerGetElapsed(activeHotkeyPromptTimer));
        promptUserForBuildStructureHotkey(activeHotkeyPromptRaceIdx);
    }
    // failure
    else {
        bk__saveHotkeysStructuresAttempt(activeHotkeyPromptRaceIdx, structureId, false, 0.0);
    }

    // Stop building the structure immediately
    UnitIssueOrder(triggeringUnit, Order(AbilityCommand("BuildInProgress", 0)), c_orderQueueReplace);

    // scores dialog
    dg_hk__createScoresDialog(activeHotkeyPromptRaceIdx);
}

bool hk_st__buildHotkeyPromptHasValue(int raceIdx, int cmdIdx) {
    hk_st__init();
    if (hk_st__buildHotkeyPrompts[raceIdx][cmdIdx].targetUnitId != null) {
        return true;
    }
    return false;
}

//////////////////////////////////////////////////////////////////
// Initialization
//////////////////////////////////////////////////////////////////

void hk_st__init() {
    if (initialized) {
        return;
    }

    WORKER_UNIT_IDS[0] = "SCV";
    WORKER_UNIT_IDS[1] = "Drone";
    WORKER_UNIT_IDS[2] = "Probe";

    BUILD_ABILITY_IDS[0] = "TerranBuild";
    BUILD_ABILITY_IDS[1] = "ZergBuild";
    BUILD_ABILITY_IDS[2] = "ProtossBuild";

    GAS_STRUCTURE_IDS[0] = "Refinery";
    GAS_STRUCTURE_IDS[1] = "Extractor";
    GAS_STRUCTURE_IDS[2] = "Assimilator";

    BUILD_HOTKEY_PROMPT_INSTRUCTIONS[0] = "Build Structure";
    BUILD_HOTKEY_PROMPT_INSTRUCTIONS[1] = "Mutate Into Structure";
    BUILD_HOTKEY_PROMPT_INSTRUCTIONS[2] = "Warp In Structure";

    // Hotkey Prompts
    initBuildHotkeyPrompts();

    initialized = true;
}

static void initBuildHotkeyPrompts () {
    int raceIdx;
    int cardLayoutsCount; // the number of card layouts on the worker unit
    int cardLayoutsIdx;
    int layoutButtonsCount; // the number of layout buttons in a card layout
    int layoutButtonsIdx;

    string abilCmdStr;
    abilcmd abilCmd;
    string unitId;
    string unitNameStr;
    text unitNameTxt;
    string buttonId;
    string iconStr;
    hk__prompt hotkeyPrompt;

    string fieldPath;

    for(raceIdx = 0; raceIdx < 3; raceIdx += 1) {
        cardLayoutsCount = CatalogFieldValueCount(c_gameCatalogUnit, WORKER_UNIT_IDS[raceIdx], "CardLayouts", 1);
        for(cardLayoutsIdx = 0; cardLayoutsIdx < cardLayoutsCount; cardLayoutsIdx += 1) {
            fieldPath = "CardLayouts" + "[" + IntToString(cardLayoutsIdx) + "].LayoutButtons";
            layoutButtonsCount = CatalogFieldValueCount(c_gameCatalogUnit, WORKER_UNIT_IDS[raceIdx], fieldPath, 1);
            for(layoutButtonsIdx = 0; layoutButtonsIdx < layoutButtonsCount; layoutButtonsIdx += 1) {
                fieldPath = "CardLayouts" + "[" + IntToString(cardLayoutsIdx) + "].LayoutButtons[" + IntToString(layoutButtonsIdx) + "].AbilCmd";
                abilCmdStr = CatalogFieldValueGet(c_gameCatalogUnit, WORKER_UNIT_IDS[raceIdx], fieldPath, 1);
                abilCmd = StringToAbilCmd(abilCmdStr);

                // Ignore the "Halt" command - however that works...
                if (AbilityCommandGetAbility(abilCmd) == BUILD_ABILITY_IDS[raceIdx] && !StringContains(abilCmdStr, ",Halt", 2, true)) {

                    unitId = CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(abilCmd), "InfoArray[" + IntToString(AbilityCommandGetCommand(abilCmd)) + "].Unit", 1);
                    unitNameStr = CatalogFieldValueGet(c_gameCatalogUnit, unitId, "Name", 1);
                    unitNameTxt = StringExternal(unitNameStr);
                    // printMsg(unitNameTxt, 1, c_messageTypeDebug);

                    buttonId = CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(abilCmd), "InfoArray[" + IntToString(AbilityCommandGetCommand(abilCmd)) + "].Button.DefaultButtonFace", 1);
                    iconStr = CatalogFieldValueGet(c_gameCatalogButton, buttonId, "Icon", 1);

                    hk_st__buildHotkeyPrompts[raceIdx][AbilityCommandGetCommand(abilCmd)].instruction = BUILD_HOTKEY_PROMPT_INSTRUCTIONS[raceIdx];
                    hk_st__buildHotkeyPrompts[raceIdx][AbilityCommandGetCommand(abilCmd)].targetTxt = unitNameTxt;
                    hk_st__buildHotkeyPrompts[raceIdx][AbilityCommandGetCommand(abilCmd)].icon = iconStr;
                    hk_st__buildHotkeyPrompts[raceIdx][AbilityCommandGetCommand(abilCmd)].targetUnitId = unitId;

                }
            }
        }
    }
}