//////////////////////////////////////////////////////////////////
// CONSTANTS
//////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////
// VARIABLES
//////////////////////////////////////////////////////////////////

static int dg__selectTrainingAreaDialog;

//////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////

// Width is based off of height because of the way sc2 dialogs assume a fixed screen height (1200) and scales width according to user's resolution settings

// headerLineIcon = "Assets\Textures\sc2_ui_glues_scorescreen_graphline_01.dds"; // 12x12
// headerLineIcon = "Assets\Textures\line_white3.dds"; // 64x64
// headerLineIcon = "Assets\Textures\line_blue.dds"; // 64x64
// headerLineIcon = "Assets\Textures\line_blue1.dds"; // 64x128
// headerLineIcon = "Assets\\Textures\\ui_techtree_line_extend.dds"; // 14x14

// Assets\Textures\ui_objectives_checkbox_failed.dds // 40x40
// Assets\Textures\ui_objectives_checkbox_active.dds // 40x40
// Assets\Textures\ui_battlenet_glue_checkboxmark.dds // 24x24
// EditorData\Images\Publishing\Failure.tga // 32x32
// EditorData\Images\Publishing\Complete.tga // 32x32

// "Assets\\Textures\\ui_battlenet_glue_checkboxmark.dds" // 30x30
// "Assets\Textures\icon-time-protoss.dds" // 64x64
// "Assets\Textures\btn-ability-terran-snipe-color.dds" // 76x76

// "Assets\Textures\btn-blank.dds" // 76x76

// static function declarations

string dg__raceName(int raceInt) {
    if (raceInt == 0) {
        return "Terran";
    }
    if (raceInt == 1) {
        return "Zerg";
    }
    if (raceInt == 2) {
        return "Protoss";
    }
    return null;
}

int dg__raceInt(string raceName) {
    if (raceName == "Terran") {
        return 0;
    }
    if (raceName == "Zerg") {
        return 1;
    }
    if (raceName == "Protoss") {
        return 2;
    }
    return -1;
}

// idk - some weird offset needed for "no selection"?
void dg__dialogControlSelectItem(int control, playergroup players, int index) {
    DialogControlSelectItem(control, players, index + 1);
}

void dg__createSelectTrainingAreaDialog() {
    int dialog;
    int control;
    int dialogWidth = 500;
    int dialogHeight = 500;

    int dialogTopPadding = 40;
    int dialogLeftPadding = 40;

    int headingHeight = 30;

    int trainingAreaBtnWidth = dialogWidth / 2;
    int trainingAreaBtnHeight = 70;

    int runningOffsetX = 0;
    int runningOffsetY = dialogTopPadding;

    // dialog
    DialogCreate(dialogWidth, dialogHeight, c_anchorCenter, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    dialog = DialogLastCreated();
    dg__selectTrainingAreaDialog = dialog;

    // heading
    libNtve_gf_CreateDialogItemLabel(dialog, dialogWidth, headingHeight, c_anchorTop, runningOffsetX, runningOffsetY, StringToText("Select a Training Area"), ColorWithAlpha(0,0,0,0), false, 0.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StandardTextHCentered24", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    runningOffsetY += headingHeight * 2;

    dg__trainingAreaHotkeysBtn = libNtve_gf_CreateDialogItemButton(dialog, trainingAreaBtnWidth, trainingAreaBtnHeight, c_anchorTop, runningOffsetX, runningOffsetY, StringToText(""), StringToText("Hotkeys"), null);
}

void dg__onClickTrainingAreaHotkeysBtn() {
    DialogDestroy(dg__selectTrainingAreaDialog);
    dg_hk__createSelectTrainingModeDialog();
}

void dg__onClickScoreModeBtn(int control) {
    if (control == dg__scoreModeLatestBtn) {
        dg__scoreMode = dg__scoreModeLatest;
    }
    if (control == dg__scoreModeProgressBtn) {
        dg__scoreMode = dg__scoreModeProgress;
    }
    if (control == dg__scoreModeAllTimeBtn) {
        dg__scoreMode = dg__scoreModeAllTime;
    }

    if (dg__trainingArea == dg__trainingAreaHotkeys) {
        if (dg_hk__hotkeyMode == dg_hk__hotkeyModeStructures) {
            dg_hk__createStructuresScoresDialog(dg__raceSelection);
        }
        if (dg_hk__hotkeyMode == dg_hk__hotkeyModeProduction) {
            dg_hk__createProductionScoresDialog(dg__raceSelection);
        }
    }
}

void dg__onSelectionChangedRacePulldown(int control) {
    int selectedIndex = DialogControlGetSelectedItem(control, 1);
    dg__raceSelection = selectedIndex - 1; // items are 1 indexed, races are 0 indexed

    PlayerSetRace(1, ct__raceId(dg__raceSelection));

    // TODO: un-duplicate this part in the dialogs_hotkeys file
    if (dg__trainingArea == dg__trainingAreaHotkeys) {
        if (dg_hk__hotkeyMode == dg_hk__hotkeyModeStructures) {
            dg_hk__createStructuresScoresDialog(dg__raceSelection);
        }
        if (dg_hk__hotkeyMode == dg_hk__hotkeyModeProduction) {
            dg_hk__createProductionScoresDialog(dg__raceSelection);
        }
    }
}

void dg__test() {
    int dialog;
    int control;
    int dialogWidth = 500;
    int dialogHeight = 500;


    int runningOffsetX = 0;
    int runningOffsetY = 0;

    // dialog
    DialogCreate(dialogWidth, dialogHeight, c_anchorTop, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    dialog = DialogLastCreated();


    // DialogControlCreate(dialog, c_triggerControlTypeListBox);
    DialogControlCreate(dialog, c_triggerControlTypePulldown);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    control = DialogControlLastCreated();

    DialogControlAddItem(control, PlayerGroupAll(), StringToText("Terran"));
    DialogControlAddItem(control, PlayerGroupAll(), StringToText("Zerg"));
    DialogControlAddItem(control, PlayerGroupAll(), StringToText("Protoss"));
}

//////////////////////////////////////////////////////////////////
// Initialization
//////////////////////////////////////////////////////////////////

void dg__init() {
    dg_hk__init();
}